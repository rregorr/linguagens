//GPT do Projeto: https://chatgpt.com/c/6888af36-4754-8332-95df-76d8971e3fdc
package com.ankiapp.model;

import java.lang.annotation.Inherited;
import javax.annotation.processing.Generated;
import jakarta.persistence.*;
import lombok.Data;

@Entity //define que a classe ser√° mapeada para o banco de dados
@Data //@Data (do Lombok) gera getters, setters e toString automaticamente
public class Pessoa {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY) // @Id + @GeneratedValue criam o campo autoincremento
//Se n√£o us√°ssemos IDENTITY, ter√≠amos que usar outro tipo de estrat√©gia, como SEQUENCE (mais comum em Oracle/PostgreSQL) 
// ou AUTO (delegado ao provedor JPA).üîé No caso do SQLite, o uso correto √© IDENTITY porque ele n√£o tem suporte a SEQUENCE.

    private Long idPessoa; //Em Java, tipos primitivos como long N√ÉO podem ser armazenados diretamente 
    //em cole√ß√µes como ArrayList (cole√ß√µes s√≥ aceitam objetos, como Long, Integer, Double, etc).
    private String nome;  
/* O processo autom√°tico de convers√£o entre tipos primitivos e wrappers √© chamado de autoboxing e unboxing. */


/* Aqui normalmente ficariam os getters e setters, mas como usamos @Data do Lombok, eles s√£o gerados automaticamente.
   Isso reduz a verbosidade do c√≥digo e melhora a legibilidade. 
   Al√©m disso, o Lombok tamb√©m gera o m√©todo toString() automaticamente, o que facilita a depura√ß√£o e o log de 
   objetos dessa classe.
    O Lombok √© uma biblioteca que ajuda a reduzir o boilerplate em classes Java, especialmente em POJOs (Plain Old Java Objects).
"A anota√ß√£o @Data da biblioteca Lombok substitui a necessidade de se declarar manualmente os m√©todos de acesso, 
como getters e setters, em uma classe Java POJO."
    Isso √© especialmente √∫til em projetos maiores, onde muitas classes precisam de getters e setters para seus campos.
 */
}
